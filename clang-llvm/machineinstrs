# After Instruction Selection:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 Domain Reassignment Pass:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Early Tail Duplication:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Optimize machine instruction PHIs:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Merge disjoint stack slots:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Local Stack Slot Allocation:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Remove dead machine instructions:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Early If-Conversion:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Machine InstCombiner:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 cmov Conversion:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Early Machine Loop Invariant Code Motion:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Machine Common Subexpression Elimination:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Machine code sinking:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Peephole Optimizations:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Remove dead machine instructions:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Live Range Shrink:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 Fixup SetCC:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 LEA Optimize:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 Optimize Call Frame:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 Avoid Store Forwarding Blocks:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 speculative load hardening:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 EFLAGS copy lowering:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After X86 WinAlloca Expander:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Detect Dead Lanes:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Process Implicit Definitions:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %5:gr32
  $esi = COPY %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %18:gr32
  $esi = COPY %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %9:gr32
  RETQ implicit $eax

# End machine code for function main.

# After Live Variable Analysis:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY killed $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %18:gr32
  $esi = COPY killed %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY killed $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# After Machine Natural Loop Construction:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY killed $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %18:gr32
  $esi = COPY killed %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY killed $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# After Eliminate PHI nodes for register allocation:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY killed $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %18:gr32
  $esi = COPY killed %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY killed $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# After Two-Address instruction pass:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %5:gr32
  $esi = COPY killed %4:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY killed $eax
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %18:gr32
  $esi = COPY killed %17:gr32
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %16:gr32 = COPY killed $eax
  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed %13:gr64_nosp, 0, $noreg, killed %16:gr32 :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  %21:gr32 = COPY killed %22:gr32
  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  %9:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %9:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# After Simple Register Coalescing:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $edi = COPY %5:gr32
144B	  $esi = COPY %4:gr32
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  %3:gr32 = COPY killed $eax
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %18:gr32
384B	  $esi = COPY %17:gr32
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %16:gr32 = COPY killed $eax
448B	  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, %16:gr32 :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  %21:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit killed $eax

# End machine code for function main.

# After Rename Disconnected Subregister Components:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $edi = COPY %5:gr32
144B	  $esi = COPY %4:gr32
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  %3:gr32 = COPY killed $eax
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %18:gr32
384B	  $esi = COPY %17:gr32
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %16:gr32 = COPY killed $eax
448B	  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, %16:gr32 :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  %21:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit killed $eax

# End machine code for function main.

# After Machine Instruction Scheduler:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $edi = COPY %5:gr32
144B	  $esi = COPY %4:gr32
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  %3:gr32 = COPY killed $eax
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %18:gr32
384B	  $esi = COPY %17:gr32
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %16:gr32 = COPY killed $eax
448B	  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, %16:gr32 :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  %21:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit killed $eax

# End machine code for function main.

# After Greedy Register Allocator:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $edi = COPY %5:gr32
144B	  $esi = COPY %4:gr32
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  %3:gr32 = COPY $eax
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  %8:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm %8:gr32, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  %17:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $edi = COPY %18:gr32
384B	  $esi = COPY %17:gr32
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %16:gr32 = COPY $eax
448B	  %13:gr64_nosp = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, %13:gr64_nosp, 0, $noreg, %16:gr32 :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  %21:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, %21:gr32 :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit $eax

# End machine code for function main.

# After Virtual Register Rewriter:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit $eax

# End machine code for function main.

# After Stack Slot Coloring:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
80B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
96B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
224B	  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

240B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.3
	  successors: %bb.4, %bb.2

256B	  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
272B	  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
288B	  JCC_1 %bb.4, 13, implicit killed $eflags

304B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.3

320B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
336B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
464B	  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

480B	bb.3 (%ir-block.21):
	; predecessors: %bb.2
	  successors: %bb.1

496B	  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
528B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
544B	  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
560B	  JMP_1 %bb.1

576B	bb.4 (%ir-block.24):
	; predecessors: %bb.1

608B	  $eax = MOV32r0 implicit-def dead $eflags
624B	  RETQ implicit $eax

# End machine code for function main.

# After Machine Copy Propagation Pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# After Machine Loop Invariant Code Motion:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# After X86 FP Stackifier:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# After PostRA Machine Sink:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# After Shrink Wrapping analysis:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=40, align=16, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rcx = MOVSX64rm32 %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.4, 4, killed renamable $rcx, 0, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.5, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Control Flow Optimizer:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Tail Duplication:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Machine Copy Propagation Pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 pseudo instruction expansion pass:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Post RA top-down list latency scheduler:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Branch Probability Basic Block Placement:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Insert fentry calls:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Insert XRay ops:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Implement the 'patchable-function' attribute:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Execution Dependency Fix:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After BreakFalseDeps:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Indirect Branch Tracking:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 vzeroupper inserter:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Byte/Word Instruction Fixup:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Atom pad short functions:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 LEA Fixup:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Compressing EVEX instrs to VEX encoding when possible:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Discriminate Memory Operands:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Insert Cache Prefetches:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Contiguously Lay Out Funclets:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After StackMap Liveness Analysis:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Live DEBUG_VALUE analysis:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After X86 Retpoline Thunks:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Check CFA info and insert CFI instructions if needed:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-24]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=40, align=16, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 20 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 30 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store 4 into %ir.4)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.6)

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.3
  successors: %bb.4, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  JCC_1 %bb.4, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.3

  renamable $edi = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.3)
  CALL64pcrel32 @suma, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $rcx = MOVSX64rm32 $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 4, killed renamable $rcx, -64, $noreg, killed renamable $eax :: (store 4 into %ir.20)

bb.3 (%ir-block.21):
; predecessors: %bb.2
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.6)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  JMP_1 %bb.1

bb.4 (%ir-block.24):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 64, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# After Instruction Selection:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Domain Reassignment Pass:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Early Tail Duplication:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Optimize machine instruction PHIs:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Merge disjoint stack slots:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Local Stack Slot Allocation:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Remove dead machine instructions:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Early If-Conversion:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Machine InstCombiner:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 cmov Conversion:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Early Machine Loop Invariant Code Motion:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Machine Common Subexpression Elimination:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Machine code sinking:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Peephole Optimizations:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Remove dead machine instructions:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Live Range Shrink:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Fixup SetCC:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 LEA Optimize:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Optimize Call Frame:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Avoid Store Forwarding Blocks:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 speculative load hardening:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 EFLAGS copy lowering:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After X86 WinAlloca Expander:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Detect Dead Lanes:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Process Implicit Definitions:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  $eax = COPY %7:gr32
  RETQ implicit $eax

# End machine code for function suma.

# After Live Variable Analysis:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $eax = COPY killed %7:gr32
  RETQ implicit killed $eax

# End machine code for function suma.

# After Machine Natural Loop Construction:
# Machine code for function suma: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $eax = COPY killed %7:gr32
  RETQ implicit killed $eax

# End machine code for function suma.

# After Eliminate PHI nodes for register allocation:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $eax = COPY killed %7:gr32
  RETQ implicit killed $eax

# End machine code for function suma.

# After Two-Address instruction pass:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $eax = COPY killed %7:gr32
  RETQ implicit killed $eax

# End machine code for function suma.

# After Simple Register Coalescing:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RETQ implicit killed $eax

# End machine code for function suma.

# After Rename Disconnected Subregister Components:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RETQ implicit killed $eax

# End machine code for function suma.

# After Machine Instruction Scheduler:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RETQ implicit killed $eax

# End machine code for function suma.

# After Greedy Register Allocator:
# Machine code for function suma: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RETQ implicit $eax

# End machine code for function suma.

# After Virtual Register Rewriter:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
176B	  RETQ implicit $eax

# End machine code for function suma.

# After Stack Slot Coloring:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
176B	  RETQ implicit $eax

# End machine code for function suma.

# After Machine Copy Propagation Pass:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  RETQ implicit $eax

# End machine code for function suma.

# After Machine Loop Invariant Code Motion:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  RETQ implicit $eax

# End machine code for function suma.

# After X86 FP Stackifier:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  RETQ implicit $eax

# End machine code for function suma.

# After PostRA Machine Sink:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  RETQ implicit $eax

# End machine code for function suma.

# After Shrink Wrapping analysis:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  RETQ implicit $eax

# End machine code for function suma.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Control Flow Optimizer:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Tail Duplication:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Machine Copy Propagation Pass:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 pseudo instruction expansion pass:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Post RA top-down list latency scheduler:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Branch Probability Basic Block Placement:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Insert fentry calls:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Insert XRay ops:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Implement the 'patchable-function' attribute:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Execution Dependency Fix:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After BreakFalseDeps:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Indirect Branch Tracking:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 vzeroupper inserter:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Byte/Word Instruction Fixup:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Atom pad short functions:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 LEA Fixup:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Compressing EVEX instrs to VEX encoding when possible:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Discriminate Memory Operands:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Insert Cache Prefetches:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Contiguously Lay Out Funclets:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After StackMap Liveness Analysis:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Live DEBUG_VALUE analysis:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After X86 Retpoline Thunks:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

# After Check CFA info and insert CFI instructions if needed:
# Machine code for function suma: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function suma.

